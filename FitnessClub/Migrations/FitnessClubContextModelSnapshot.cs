// <auto-generated />
using System;
using FitnessClub.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitnessClub.Migrations
{
    [DbContext(typeof(FitnessClubContext))]
    partial class FitnessClubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitnessClub.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AttendanceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("attendance_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("attendance_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("discount_percentage");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id")
                        .HasName("discounts_pkey");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("exercises_pkey");

                    b.HasIndex(new[] { "Title" }, "exercises_title_key")
                        .IsUnique();

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DaysAmount")
                        .HasColumnType("integer")
                        .HasColumnName("days_amount");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("price");

                    b.Property<DateOnly>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("purchase_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("orders_pkey");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short?>("Estimation")
                        .HasColumnType("smallint")
                        .HasColumnName("estimation");

                    b.Property<DateOnly>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("review_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text")
                        .HasColumnName("review_text");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("reviews_pkey");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Title" }, "roles_title_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("price_per_day");

                    b.Property<decimal?>("Rating")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("subscriptions_pkey");

                    b.HasIndex(new[] { "Title" }, "subscriptions_title_key")
                        .IsUnique();

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.TrainingSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<DateOnly>("TrainingDate")
                        .HasColumnType("date")
                        .HasColumnName("training_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("training_schedules_pkey");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("training_schedules", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<DateOnly>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("registration_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysAmount")
                        .HasColumnType("integer")
                        .HasColumnName("days_amount");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("wishlists_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SubscriptionId", "UserId" }, "unique_user_subscription")
                        .IsUnique();

                    b.ToTable("wishlists", (string)null);
                });

            modelBuilder.Entity("FitnessClub.Models.Attendance", b =>
                {
                    b.HasOne("FitnessClub.Models.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId")
                        .HasConstraintName("attendance_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessClub.Models.Discount", b =>
                {
                    b.HasOne("FitnessClub.Models.Subscription", "Subscription")
                        .WithMany("Discounts")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("discounts_subscriptioni_d_fkey");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FitnessClub.Models.Order", b =>
                {
                    b.HasOne("FitnessClub.Models.Subscription", "Subscription")
                        .WithMany("Orders")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("orders_subscription_id_fkey");

                    b.HasOne("FitnessClub.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("orders_useri_d_fkey");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessClub.Models.Review", b =>
                {
                    b.HasOne("FitnessClub.Models.Subscription", "Subscription")
                        .WithMany("Reviews")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("reviews_subscription_id_fkey");

                    b.HasOne("FitnessClub.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("reviews_user_id_fkey");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessClub.Models.TrainingSchedule", b =>
                {
                    b.HasOne("FitnessClub.Models.Exercise", "Exercise")
                        .WithMany("TrainingSchedules")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("training_schedules_exercise_id_fkey");

                    b.HasOne("FitnessClub.Models.User", "User")
                        .WithMany("TrainingSchedules")
                        .HasForeignKey("UserId")
                        .HasConstraintName("training_schedules_user_id_fkey");

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessClub.Models.User", b =>
                {
                    b.HasOne("FitnessClub.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitnessClub.Models.Wishlist", b =>
                {
                    b.HasOne("FitnessClub.Models.Subscription", "Subscription")
                        .WithMany("Wishlists")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("wishlists_subscription_id_fkey");

                    b.HasOne("FitnessClub.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("wishlists_user_id_fkey");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessClub.Models.Exercise", b =>
                {
                    b.Navigation("TrainingSchedules");
                });

            modelBuilder.Entity("FitnessClub.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitnessClub.Models.Subscription", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("FitnessClub.Models.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("TrainingSchedules");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
